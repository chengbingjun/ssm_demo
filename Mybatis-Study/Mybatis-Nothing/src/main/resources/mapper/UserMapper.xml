<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.test.dao.UserMapper">
    <!--当前mapper开启二级缓存-->
    <cache readOnly="true"/>

    <!--useCache表示该方法是否使用缓存-->
    <select id="findUser" resultType="com.test.com.cbj.pojo.User" useCache="true">
        select * from user
    </select>   

    <select id="findUserByNameLike" resultType="com.test.com.cbj.pojo.User">
        select * from user where name like #{values}
    </select>

    <select id="getUserById" parameterType="Integer" resultType="com.test.com.cbj.pojo.User">
        select * from user where id = #{id}
    </select>

    <select id="findUserByLimit" parameterType="com.test.com.cbj.pojo.Page" resultType="com.test.com.cbj.pojo.User">
        select * from user limit #{startIndex},#{pageSize}
    </select>

    <!--入参是对象，对象中的属性可以直接取出来，如#{name} 就是取user.name ！-->
    <!--默认情况下增、删和改都会刷新缓存，但是可以通过flushCache来控制是否刷新缓存-->
    <insert id="addUser" parameterType="com.test.com.cbj.pojo.User" flushCache="true">
        insert into user(name, password) values(#{name},#{password})
    </insert>

    <insert id="addUserByMap" parameterType="map">
        insert into user(name, password) values(#{name},#{password})
    </insert>

    <update id="updateUser" parameterType="com.test.com.cbj.pojo.User">
        update user set name = #{name} , password = #{password} where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="Integer">
        delete from user where id = #{id}
    </delete>

</mapper>
